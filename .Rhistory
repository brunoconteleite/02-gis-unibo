filter(subregion %in% c('Southern Europe'))
ggplot(gmsf.EU) +
geom_sf(aes(fill=name_long))
ggplot() + # leave empty, add data to geometry
geom_sf(data = gmsf.EU) +
geom_sf(gmsf.point)
ggplot() + # leave empty, add data to geometry
geom_sf(data = gmsf.EU) +
geom_sf(data = gmsf.point)
gmsf.EU
ggplot() + # leave empty, add data to geometry
geom_sf(data = gmsf.EU, aes(fill = name_long)) +
geom_sf(data = gmsf.point)
ggplot() + # leave empty, add data to geometry
geom_sf(data = gmsf.EU) +
geom_sf(data = gmsf.point, aes(color = name))
rm(list = ls())
graphics.off()
# Hypothetical dataset of cities:
df.cities <- data.frame(
name = c('Bologna', 'London', 'Madrid', 'Paris'),
temperature = c(31, 21, 29,28),
language = c('Italian', 'English', 'Spanish', 'French'),
longitude = c(11.3,-0.1,-3.7,2.3),
latitude = c(44.4,51.5, 40.4,48.8)
)
df.cities
sf.cities <- st_as_sf(df.cities,coords = c('longitude', 'latitude'))
plot(sf.cities)
graphics.off()
sf.cities
sf.EU <- world %>%
filter(continent=='Europe' & name_long!='Russia')
sf.EU
sf.EU <- world %>%
filter(continent=='Europe' & name_long!='Russian Federation')
sf.EU
ggplot() + # leave empty, add data to geometry
geom_sf(data = sf.EU) +
geom_sf(data = sf.cities, aes(color = name))
sf.cities
sf.cities <- st_as_sf(
df.cities,
coords = c('longitude', 'latitude'),
crs = 'EPSG:4326'
)
sf.cities # watch out CRS (projection)!
# Plotting as before:
ggplot() + # leave empty, add data to geometry
geom_sf(data = sf.EU) +
geom_sf(data = sf.cities, aes(color = name))
ggplot() + # leave empty, add data to geometry
geom_sf(data = sf.EU, aes(fill=name_long)) +
geom_sf(data = sf.cities, aes(shape = language))
ggplot() + # leave empty, add data to geometry
geom_sf(data = sf.EU, aes(fill=subregion)) +
geom_sf(data = sf.cities, aes(shape = language))
ggplot(sf.EU) + geom_sf()
ggplot(st_transform(sf.EU,3857)) + geom_sf()
ggplot(st_transform(sf.EU,'+proj=wintri')) + geom_sf()
sf.EU
sf.EU %>% slice(1:5)
sf.EU %>% slice_head()
sf.EU %>% slice_head(n=10)
sf.EU %>% slice_head(n=15)
df.cities
df.cities %>% group_by(name)
q()
## ------------------------------------------------------
## 01_CLASS01.R - R Script for Lecture 01 (GIS course).
# version: 1.0
# Author: Bruno Conte Leite @2022-23
# b.conte@unibo.it
## ------------------------------------------------------
# 1. BASICS OF SPATIAL DATA WITH SIMPLE FEATURES: ----
library(sf) # simple features' library
library(spData) # library of spatial datasets
library(tidyverse) # dplyr, ggplot, ...
sf.provinces <- st_read('../../../Downloads/ne_110m_admin_1_states_provinces/', 'ne_110m_admin_1_states_provinces')
sf.provinces
head(sf.provinces)
sf.provinces
names(sf.provinces)
sf.provinces
sf.provinces$area_sqkm
sf.provinces$postal
sf.provinces <- sf.provinces %>%
select(name, region_sub)
sf.provinces
plot(sf.provinces)
ggplot(sf.provinces) +
geom_sf(aes(fill=region_sub))
sf.provinces <- st_read('../../../Downloads/ne_110m_admin_1_states_provinces/', 'ne_110m_admin_1_states_provinces')
sf.provinces <- sf.provinces %>%
select(name, region, region_sub)
sf.provinces
ggplot(sf.provinces) +
geom_sf(aes(fill=region))
ggplot(sf.provinces %>% filter(region=='West')) +
geom_sf(aes(fill=region_sub))
sf.prov.reproj <- st_transform(sf.provinces, crs = "+proj=moll")
ggplot(sf.provinces) +
geom_sf(aes(fill=region))
ggplot(sf.prov.reproj) +
geom_sf(aes(fill=region))
ggplot(sf.provinces) +
geom_sf(fill-region) +
coord_sf(crs = "+proj=moll")
ggplot(sf.provinces) +
geom_sf(fill=region) +
coord_sf(crs = "+proj=moll")
sf.provinces <- st_read('../../../Downloads/ne_110m_admin_1_states_provinces/', 'ne_110m_admin_1_states_provinces')
sf.provinces
# It has too many variables (fields)! Select those that matter!
sf.provinces <- sf.provinces %>%
select(name, region, region_sub)
ggplot(sf.provinces) +
geom_sf(aes(fill=region))
ggplot(sf.provinces) +
geom_sf(aes(fill=region)) +
coord_sf(crs = "+proj=moll")
ggplot(sf.provinces) +
geom_sf(aes(fill=region)) +
coord_sf(crs = "+proj=moll")
ggplot(sf.provinces) +
geom_sf(aes(fill=region)) +
coord_sf(crs = "+proj=wintri")
ggplot(sf.provinces) +
geom_sf(aes(fill=region)) +
coord_sf(crs = "+proj=laea +x_0=0 +y_0=0 +lon_0=-74 +lat_0=40")
rm(sf.prov.reproj)
sf.andorra <- st_read('../../../Downloads/gadm41_AND.gpkg')
st_layers('../../../Downloads/gadm41_AND.gpkg')
sf.andorra <- st_read('../../../Downloads/gadm41_AND.gpkg', 'ADM_ADM_1')
sf.andorra
plot(sf.andorra)
sf.andorra
ggplot(sf.andorra) + geom_sf()
sf.andorra <- st_read('../../../Downloads/gadm41_AND_1.json')
sf.andorra
sf.andorra <- st_read('../../../Downloads/gadm41_AND_1.kmz')
sf.andorra <- st_read('../../../Downloads/gadm41_AND_1.kml')
graphics.off()
rm(list = ls())
library(sf) # simple features' library
library(spData) # library of spatial datasets
library(tidyverse) # dplyr, ggplot, ...
# Cheat sheet: https://osf.io/an6b5/download
# 1.1. Creating SF GEOMETRIES (SFG):
gm.point <- st_point(c(5,2)) # a point
# Lines: require a matrix of points
linestring_matrix <-rbind(c(1, 5), c(4, 4), c(4, 1), c(2, 2), c(3, 2))
gm.line <- st_linestring(linestring_matrix)
# Polygons: require a LIST with the matrices
# (important: first and last vertices must be
# the same)
polygon_list <- list(rbind(c(1, 5), c(2, 2), c(4, 1), c(4, 4), c(1, 5)))
gm.polyg <- st_polygon(polygon_list)
# MULTI SF GEOMETRIES:
# Multipoints: a matrix with coordinates
gm.multipoints <- st_multipoint(linestring_matrix)
# Multilines: use a LIST of matrices (each with
# each lines' coordinates):
multiline_list <- list(rbind(c(1, 5), c(4, 4), c(4, 1), c(2, 2), c(3, 2)),
rbind(c(1, 2), c(2, 4)))
gm.multilines <- st_multilinestring((multiline_list))
# Multipolygons: use a LIST OF LISTS:
## MULTIPOLYGON
multipolygon_list <- list(list(rbind(c(1, 5), c(2, 2), c(4, 1), c(4, 4), c(1, 5))),
list(rbind(c(0, 2), c(1, 2), c(1, 3), c(0, 3), c(0, 2))))
gm.multipolyg <- st_multipolygon(multipolygon_list)
# 1.2. CREATING SF COLUMNS:
# SF COMLUMN: GEOMETRY + PROJECTION:
# Remember: ALWAYS use standardized "EPSG:4326"
# CRS (WGS 84); longitude/latitude:
gm.point <- st_point(c(11.3, 44.4)) # c(longitude,latitude)
gmc.point <- st_sfc(gm.point,crs = 'EPSG:4326')
gmc.point
# 1.3. CREATING SIMPLE FEATURES (SF):
# SIMPLE FEATURE:
#  - SF COLUMN (GEOMETRY + PROJECTION) +
#  - ATTRIBUTE (DATA FRAME)
df.attr <- data.frame(
name = 'Bologna',
temperature = 31,
language = 'Italian'
)
gmsf.point <- st_sf(df.attr,geometry = gmc.point)
gmsf.point
gmsf.point[,'name']
gmsf.point %>% select(name) # dplyr syntax
st_geometry(gmsf.point)
# Plotting with ggplot():
ggplot(gmsf.point) +
geom_sf()
ggplot(gmsf.point) +
geom_sf(aes(color=name))
# 1.4. Combining (i.e. plotting) different
# simple features:
# Using the 'world' data from spData:
gmsf.world <- world
gmsf.world
# First plotting with plot()
plot(gmsf.world)
plot(gmsf.world[,'continent'])
plot(gmsf.world %>% select('continent')) # dplyr syntax
plot(st_geometry(gmsf.world)) # only geometry, no attributes
# using ggplot:
ggplot(gmsf.world) +
geom_sf()
ggplot(gmsf.world) +
geom_sf(aes(fill=continent))
# Filtering spatial data:
gmsf.EU <- gmsf.world %>%
filter(subregion %in% c('Southern Europe'))
ggplot(gmsf.EU) +
geom_sf(aes(fill=name_long))
# 1.4. Plotting them together (multilayer
# ggplot):
ggplot() + # leave empty, add data to geometry
geom_sf(data = gmsf.EU) +
geom_sf(data = gmsf.point)
ggplot() + # leave empty, add data to geometry
geom_sf(data = gmsf.EU, aes(fill = name_long)) +
geom_sf(data = gmsf.point)
ggplot() + # leave empty, add data to geometry
geom_sf(data = gmsf.EU) +
geom_sf(data = gmsf.point, aes(color = name))
rm(list = ls()) # cleaning envrionment
graphics.off()
df.cities <- data.frame(
name = c('Bologna', 'London', 'Madrid', 'Paris'),
temperature = c(31, 21, 29,28),
language = c('Italian', 'English', 'Spanish', 'French'),
longitude = c(11.3,-0.1,-3.7,2.3),
latitude = c(44.4,51.5, 40.4,48.8)
)
df.cities
sf.cities <- st_as_sf(df.cities,coords = c('longitude', 'latitude'))
sf.cities
plot(sf.cities)
graphics.off()
ggplot(sf.cities) + geom_sf()
sf.cities <- st_as_sf(
df.cities,
coords = c('longitude', 'latitude'),
crs = 'EPSG:4326'
)
sf.cities
ggplot(sf.cities) + geom_sf()
st_write(sf.cities,'Sandbox/sf_cities.shp')
graphics.off()
rm(list = ls())
## ------------------------------------------------------
## 01_CLASS01.R - R Script for Lecture 01 (GIS course).
# version: 1.0
# Author: Bruno Conte Leite @2022-23
# b.conte@unibo.it
## ------------------------------------------------------
# 1. BASICS OF SPATIAL DATA WITH SIMPLE FEATURES: ----
library(sf) # simple features' library
library(spData) # library of spatial datasets
library(tidyverse) # dplyr, ggplot, ...
sf.world <- world
sf.world$area_km2
world_agg3 = world |>
group_by(continent) |>
summarize(pop = sum(pop, na.rm = TRUE))
world_agg3 = world %>%
group_by(continent) %>%
summarize(pop = sum(pop, na.rm = TRUE))
world$pop
world_agg3 = world %>%
group_by(continent)
world_agg3 = world %>%
group_by(continent) %>% summarise(pop2 = sum(pop))
world_agg4  = world %>%
group_by(continent) %>%
summarize(pop = sum(pop, na.rm = TRUE), `area_sqkm` = sum(area_km2), n = n())
sf_use_s2(F)
world_agg4  = world %>%
group_by(continent) %>%
summarize(pop = sum(pop, na.rm = TRUE), `area_sqkm` = sum(area_km2), n = n())
world_agg4
plot(world_agg4 %>% select(pop))
plot(world_agg4 %>% select(area_sqkm))
world
rm(world_agg3)
rm(world_agg4)
sf_use_s2(T)
world %>% group_by(continent)
world %>% group_by(continent) %>% st_drop_geometry()
world %>% st_drop_geometry() %>% group_by(continent)
graphics.off()
sf.world <- world
# 3.1. Let us say we want to calculate
# population by continent:
sf.world.agg <- world %>%
group_by(continent) %>%
summarize(pop = sum(pop, na.rm = TRUE))
sf_use_s2(F)
sf.world.agg <- world %>%
group_by(continent) %>%
summarize(pop = sum(pop))
sf.world.agg
sf.world.agg <- world %>%
group_by(continent) %>%
summarize(pop = sum(pop,na.rm=T))
ggplot(sf.world.agg) +
geom_sf(aes(fill=pop))
ggplot(sf.world.agg) +
geom_sf(aes(fill=log(pop)))
ggplot(sf.world.agg) +
geom_sf(aes(fill=as.factor(pop/1e9)))
ggplot(sf.world.agg) +
geom_sf(aes(fill=as.factor(pop)))
sf.world.agg <- sf.world %>%
group_by(continent) %>%
summarise(pop = sum(pop,na.rm = T), area = sum(area_km2,na.rm = T))
sf.world.agg
ggplot(sf.world.agg) +
geom_sf(aes(fill=as.factor(area)))
world
spData::afcon
spData::africa.rook.nb
spData::afcon
world
world_bank_pop
worldbank_df
names(worldbank_df)
graphics.off()
coffee_data
df.coffe <- coffee_data
df.coffe
sf.world
rm(sf.world.agg)
sf.world.merged <- sf.world %>%
left_join(df.coffe)
sf.world.merged
sf.world %>%
select(name_long,continent) %>%
left_join(df.coffe)
sf.world.merged <- sf.world %>%
select(name_long,continent) %>%
left_join(df.coffe)
ggplot(sf.world.merged) +
geom_sf(aes(fill=coffee_production_2017))
df.coffe <- df.coffe %>%
rename(name_long = country.name)
df.coffe <- df.coffe %>%
rename(country.name = name_long)
df.coffe
sf.world %>%
left_join(df.coffe)
sf.world %>%
left_join(df.coffe,by = c('name_long', 'country.name'))
sf.world %>%
left_join(df.coffe, by = c('country.name', 'name_long'))
sf.world
sf.world %>%
left_join(df.coffe,by = c(name_long =  'country.name'))
graphics.off()
sf.world.merged <-sf.world %>%
left_join(df.coffe)
# Suppose we have an additional dataset
df.coffe <- coffee_data
df.coffe
# Merging (joining it) to the sf:
sf.world.merged <-sf.world %>%
left_join(df.coffe)
df.coffe
sf.world.merged
sf.world.merged <- sf.world.merged %>%
mutate(coffe_capita = coffee_production_2016/pop)
sf.world.merged
sf.world.merged %>% select(coffe_capita)
sf.world.merged <- sf.world.merged %>%
mutate(coffee_capita = coffee_production_2016/pop)
ggplot(sf.world.merged) +
geom_sf(aes(fill=coffee_capita))
ggplot(sf.world.merged) +
geom_sf(aes(fill=(coffee_production_2016/area_km2)))
ggplot(sf.world.merged) +
geom_sf(aes(fill=(coffee_production_2016/area_km2))) +
guide(F)
ggplot(sf.world.merged) +
geom_sf(aes(fill=(coffee_production_2016/area_km2))) +
scale_guide(F)
sf.world[1:3,]
sf.world <- world
# 3.1. Basic oprations: filtering, slicing
# selecting, etc.
sf.world[1:3,]
graphics.off()
sf.world[1:3,]
sf.world[,1:3]
sf.world %>%
slice(1:3)
sf.world %>%
select(1:3)
rm(sf.world.merged)
sf.world[pop>1e6] # population larger than 100 million
sf.world[pop>1e6,] # population larger than 100 million
sf.world %>%
filter(pop>1e6)
sf.world %>%
filter(pop>1e6) %>%
select(name_long, continent, pop)
sf.world %>%
filter(pop>100000000) %>%
select(name_long, continent, pop)
p <- rbind(c(3.2,4), c(3,4.6), c(3.8,4.4), c(3.5,3.8), c(3.4,3.6), c(3.9,4.5))
(mp <- st_multipoint(p))
s1 <- rbind(c(0,3),c(0,4),c(1,5),c(2,5))
(ls <- st_linestring(s1))
p1 <- rbind(c(0,0), c(1,0), c(3,2), c(2,4), c(1,4), c(0,0))
p2 <- rbind(c(1,1), c(1,2), c(2,2), c(1,1))
pol <-st_polygon(list(p1,p2))
plot(pol)
p1 <- rbind(c(0,0), c(1,0), c(3,2), c(2,4), c(1,4), c(0,0))
p2 <- rbind(c(1,1), c(1,2), c(2,2), c(1,1))
pol <-st_polygon(list(p1))
plot(pol)
plot(ls,add=T)
plot(mp,add=T)
ggplot() + geom_sf(data = pol) + geom_sf(data = ls) + geom_sf(data = mp)
pol
p1
p <- rbind(c(3.2,4), c(3,4.6), c(3.8,4.4), c(3.5,3.8), c(3.4,3.6), c(3.9,4.5))
mp <- st_multipoint(p)
s1 <- rbind(c(0,3),c(0,4),c(1,5),c(2,5))
ls <- st_linestring(s1)
p1 <- rbind(c(0,0), c(1,0), c(3,2), c(2,4), c(1,4), c(0,0))
pol <-st_polygon(list(p1))
ggplot() +
geom_sf(data = pol) +
geom_sf(data = ls) +
geom_sf(data = mp)
sf.airports <- st_read('../../../Downloads/ne_10m_airports/', 'ne_10m_airports')
sf.airports
names(sf.airports)
sf.airports$location
names(sf.airports)
sf.airports
ggplot() +
geom_sf(data = world,fill=NA) +
geom_sf(data = sf.airports, aes(color = type))
ggplot() +
geom_sf(data = world,fill=NA) +
geom_sf(data = sf.airports, aes(color = location))
ggplot() +
geom_sf(data = world,fill=NA) +
geom_sf(data = sf.airports, aes(color = type))
graphics.off()
df.wb <- worldbank_df
df.wb
sf.world
sf.merged <- sf.world %>%
left_join(df.wb)
sf.world[161]
sf.world[161,]
df.wb[is.na(iso_a2)]
df.wb[is.na(iso_a2),]
df.wb %>% filter(is.na(iso_a2))
sf.merged[161,]
st_drop_geometry(sf.merged[161,])
data.table(st_drop_geometry(sf.merged[161,]))
data.table::data.table(st_drop_geometry(sf.merged[161,]))
sf.world <- world
df.wb <- worldbank_df
sf.merged <- sf.world %>%
left_join(df.wb)
world
world$continent
sf.merged <- sf.world %>%
left_join(df.wb) %>%
filter(continent %in% c('North America', 'South America'))
sf.world <- world %>% filter(!is.na(iso_a2))
df.wb <- worldbank_df %>% filter(!is.na(iso_a2))
sf.merged <- sf.world %>%
left_join(df.wb) %>%
filter(continent %in% c('North America', 'South America'))
sf.merged
sf.world <- world %>% filter(!is.na(iso_a2))
df.wb <- worldbank_df %>% filter(!is.na(iso_a2))
sf.merged <- sf.world %>%
left_join(df.wb) %>%
filter(continent %in% c('North America', 'South America')) %>%
mutate(urban_rate = (urban_pop/pop)*100)
ggplot(sf.merged) +
geom_sf(aes=urban_rate)
sf.merged <- sf.world %>%
left_join(df.wb) %>%
filter(continent %in% c('North America', 'South America')) %>%
mutate(urban_rate = (urban_pop/pop)*100)
sf.merged
sf.merged$urban_rate
ggplot(sf.merged) +
geom_sf(aes(fill=urban_rate))
ggplot(sf.merged) +
geom_sf(aes(fill=urban_rate)) +
coord_sf(crs = "+proj=laea +x_0=0 +y_0=0 +lon_0=-74 +lat_0=40")
sf.merged
sf.agg <- sf.merged %>%
group_by(subregion) %>%
summarise(av_lit = mean(literacy,na.rm=T))
ggplot(sf.agg) +
geom_sf(aes(fill=av_lit)) +
coord_sf(crs = "+proj=laea +x_0=0 +y_0=0 +lon_0=-74 +lat_0=40")
sf.agg
rm(list = ls())
graphics.off()
