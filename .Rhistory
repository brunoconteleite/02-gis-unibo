q()
q()
q()
q()
q()
q()
## ############################################################################
## MAKE_DATA.R - Generates the data of the project (produces the
## grid, compute lake area, suitabilities, population, etc.)
# (c) Bruno Conte, Remi Jedwab @ 2022
cat("\014") #clear console
rm(list = ls()) # clean RAM
# Setting the working directory:
wd <- '~/Dropbox/Research/Sandbox/HanbookEntryCChangeMigration/'
source('~/Dropbox/Research/Sandbox/HanbookEntryCChangeMigration/code/make_visuals.R')
plot(rr)
rm(rr)
graphics.off()
rr<-getData('SRTM', lon=16, lat=48)
rr
rm(rr)
rr<-getData('SRTM')
rr<-getData('SRTM', lon=-180, lat=-90)
rr<-getData('SRTM', lon=-180, lat=-60)
rm(list = ls())
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
install.packages('xaringan')
install.packages('xaringanthemer')
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
library(sf) # simple features' library
library(spData) # library of spatial datasets
library(tidyverse) # dplyr, ggplot, ...
sf.world <- world
sf.world
sf.world[1,1]
sf.world[1,]
sf.world[1:2,]
sf.world %>% slice(1:2)
sf.world[,1:2]
sf.world %>% select(1:2)
sf.world %>% filter(area_km2>200000)
sf.world %>% filter(area_km2>200000) %>% select(name_long,area_km2)
sf.world
sf.world[,'iso_a2']
sf.world[,-'iso_a2']
sf.world[,-c('iso_a2')]
sf.world %>% select(-iso_a2)
sf.world %>% filter(continent=='South America')
sf.world %>% filter(continent=='South America' & area_km2>200000)
sf.world %>% filter(!(continent=='South America' & area_km2>200000))
sf.world$area_km2>200000
df.world <- st_drop_geometry(sf.world)
df.world
df.world %>%
group_by(continent) %>%
summarise(total_area = sum(area_km2))
rm(df.world)
df.agg <- df.world %>%
group_by(continent) %>%
summarise(total_area = sum(area_km2))
df.world <- st_drop_geometry(sf.world) # it is just a data set
df.world
df.agg<-df.world %>%
group_by(continent) %>%
summarise(total_area = sum(area_km2))
df.agg
df.world %>%
group_by(continent) %>%
mutate(total_pop = sum(pop,na.rm=T))
df.world %>%
group_by(continent) %>%
mutate(total_pop = sum(pop,na.rm=T)) %>%
select(name_long,continent,pop,total_pop)
rm(df.world)
rm(df.agg)
sf_use_s2(T)
sf.world
sf.world <- world
sf.world.agg <- sf.world %>%
group_by(continent) %>%
summarize(pop = sum(pop,na.rm=T))
sf_use_s2(F)
sf.world.agg <- sf.world %>%
group_by(continent) %>%
summarize(pop = sum(pop,na.rm=T))
sf.world.agg
ggplot(sf.world.agg) +
geom_sf(aes(fill=pop))
ggplot(sf.world.agg) +
geom_sf(aes(fill=as.factor(pop)))
# Multiple aggregation:
sf.world.agg <- sf.world %>%
group_by(continent) %>%
summarise(pop = sum(pop,na.rm = T), area = sum(area_km2,na.rm = T))
sf.world.agg
ggplot(sf.world.agg) +
geom_sf(aes(fill=as.factor(round(area/1e6,0))))
ggplot(sf.world.agg) +
geom_sf(aes(fill=as.factor(round(area/1e6,0)))) +
scale_fill_discrete(name = 'Total area\n(million km2')
ggplot(sf.world.agg) +
geom_sf(aes(fill=round(area/1e6,0))) +
scale_fill_binned()
rm(sf.world.agg)
df.coffe <- coffee_data
df.coffe
sf.world.merged <-sf.world %>%
left_join(df.coffe)
df.coffe
sf.world.merged <-sf.world %>%
left_join(df.coffe)
sf.world.merged %>%
select(name_long,continent,coffee_production_2017)
ggplot(sf.world.merged) +
geom_sf(aes(fill=coffee_production_2017)) +
scale_fill_distiller(palette = 'Greens')
ggplot(sf.world.merged) +
geom_sf(aes(fill=coffee_production_2017)) +
scale_fill_distiller(name = 'Coffee', palette = 'Spectral', na.value = NA) +
theme_bw()
df.coffe <- df.coffe %>%
rename(country.name = name_long)
df.coffe
sf.world %>%
left_join(df.coffe)
sf.world %>%
left_join(df.coffe,by = c(name_long =  'country.name'))
rm(list = ls())
graphics.off()
sf.cant <- nz  %>%  filter(Name == "Canterbury")
sf.nzpeaks <- nz_height
ggplot() +
geom_sf(data = nz,fill='white') + # whole New Zealand
geom_sf(data = sf.cant, aes(fill='Canterbury')) + # Only Canterbury
geom_sf(data = sf.nzpeaks,shape = 2)
nz_height
nz_height[sf.cant,]
nz_height %>% st_filter(sf.cant)
nz_height %>% st_filter(sf.cant,.predicate = st_within)
nz_height %>% st_filter(sf.cant,.predicate = st_covers)
nz_height %>% st_filter(sf.cant,.predicate = st_within)
ggplot() +
geom_sf(data = nz,fill='white') + # whole New Zealand
geom_sf(data = sf.cant, aes(fill='Canterbury')) + # Only Canterbury
geom_sf(data = sf.nzpeaks,shape = 2) +
geom_sf(data = sf.cant.peaks,shape = 2,color='blue')
sf.cant <- nz  %>%  filter(Name == "Canterbury")
sf.nzpeaks <- nz_height
# Visualizing:
ggplot() +
geom_sf(data = nz,fill='white') + # whole New Zealand
geom_sf(data = sf.cant, aes(fill='Canterbury')) + # Only Canterbury
geom_sf(data = sf.nzpeaks,shape = 2)
# What if we want to filter peaks in Canterbury?
sf.cant.peaks <- sf.nzpeaks[sf.cant,] # slicing
nz
nz %>% st_filter(nz_height)
nz_filtered<-nz %>% st_filter(nz_height)
ggplot() + geom_sf(data = nz) + geom_sf(data = nz_filtered,fill='red')
st_intersects(nz_height,sf.cant)
st_intersects(nz_height,sf.cant,sparse = F)
set.seed(2018) # set seed for reproducibility
bb <- st_bbox(world) # the world's bounds
#>   xmin   ymin   xmax   ymax
#> -180.0  -89.9  180.0   83.6
random_df <- data.frame(
x = runif(n = 10, min = bb[1], max = bb[3]),
y = runif(n = 10, min = bb[2], max = bb[4])
)
rm(bb)
sf.random_points <- random_df %>%
st_as_sf(coords = c("x", "y"))  %>%  # set coordinates
st_set_crs("EPSG:4326") # set geographic CRS
rm(random_df)
ggplot() +
geom_sf(data = world) +
geom_sf(data = sf.random_points)
sf.random_points
sf.points.merged <- sf.random_points %>%
st_join(world)
sf.points.merged
ggplot() +
geom_sf(data = world) +
geom_sf(data = sf.points.merged, aes(color=name_long))
sf.disj.1 <- cycle_hire
sf.disj.2 <- cycle_hire_osm
sf.disj.1 <- cycle_hire
sf.disj.2 <- cycle_hire_osm
ggplot() +
geom_sf(data = sf.disj.1) +
geom_sf(data = sf.disj.2,color='red', alpha=.5)
sf.disjoint.joined <- st_join(
sf.disj.1,
sf.disj.2,
st_is_within_distance,
dist = units::set_units(20, "m")
)
sf.disjoint.joined
sf.disj.1
logical.dist <- st_is_within_distance(
sf.disj.1,
sf.disj.2,
dist = units::set_units(20, "m"),
sparse = F
)
dim(logical.dist)
rm(list = ls())
graphics.off()
q()
library(sf) # simple features' library
library(spData) # library of spatial datasets
library(tidyverse) # dplyr, ggplot, ...
sf.river <- seine
# Rivers in France:
ggplot() +
geom_sf(data = world %>% filter(iso_a2=='FR')) +
geom_sf(data = sf.river)
sf.usstates <- us_states
sf.usstates
source('~/Downloads/01_class04.R', echo=TRUE)
library(sf) # simple features' library
library(spData) # library of spatial datasets
library(tidyverse) # dplyr, ggplot, ...
rm(list = ls())
sf.usstates <- us_states
sf.usstates
sf.us.centroids <- st_centroid(sf.usstates)
sf.us.centroids
rm(sf.us.centroids)
ls()
rm(list = ls())
sf.usstates <- us_states
sf.usstates
sf.us.centroids <- st_centroid(sf.usstates)
sf.us.centroids
names(sf.usstates)
names(sf.us.centroids)
ggplot() +
geom_sf(data = sf.usstates) +
geom_sf(data = sf.us.centroids, aes(color = 'Centroids'), shape = 16)
sf.river.buffer <- st_buffer(
sf.river,
dist = 5000 # 5 km (distance is in meters!)
)
ggplot() +
geom_sf(data = sf.river) +
geom_sf(data = sf.river.buffer, aes(fill=name), alpha=.5) +
theme_bw()
sf.river <- seine
sf.river.buffer <- st_buffer(
sf.river,
dist = 5000 # 5 km (distance is in meters!)
)
ggplot() +
geom_sf(data = sf.river) +
geom_sf(data = sf.river.buffer, aes(fill=name), alpha=.5) +
theme_bw()
sf.river <- seine
sf.cast <- st_cast(x = sf.river, to = 'MULTIPOINT')
ggplot() +
geom_sf(data = sf.river) +
geom_sf(data = sf.cast, aes(color = name),shape = 1)
sf.cast.point <- st_cast(x = sf.river, to = 'POINT')
sf.cast.point
sf.cast
sf.cast.point
sf.circles <- st_centroid(seine) %>%
st_buffer(dist=100000)
ggplot() +
geom_sf(data = sf.circles, aes(fill=name),alpha=.5) +
theme_bw()
sf.circle.1 <- sf.circles[1,]
sf.circle.2 <- sf.circles[2,]
sf.intersection <- st_intersection(
sf.circle.1,
sf.circle.2
)
sf.intersection
ggplot() +
geom_sf(data = sf.circles, aes(fill=name),alpha=.5) +
geom_sf(data = sf.intersection, aes(fill='Intersection'),alpha=.95) +
theme_bw()
sf.try <- st_intersection(sf.circles)
sf.try
ggplot() + geom_sf(data = sf.try, aes(fill = n.overlaps)) + theme_bw()
ggplot() + geom_sf(data = sf.try, aes(fill = as.factor(n.overlaps)),alpha = .5) + theme_bw()
sf.difference <- st_difference(
sf.circle.1,
sf.circle.2
)
ggplot() +
geom_sf(data = sf.circles, aes(fill=name),alpha=.5) +
geom_sf(data = sf.difference, aes(fill='Difference'),alpha=.95) +
theme_bw()
sf.union <- st_union(
sf.circle.1,
sf.circle.2
)
ggplot() +
geom_sf(data = sf.circles, aes(fill=name),alpha=.5) +
geom_sf(data = sf.union, aes(fill='Union'),alpha=.95) +
theme_bw()
sf.river <- seine
sf.centr <- st_centroid(sf.river)
sf.river <- seine
sf.centr <- st_centroid(sf.river)
st_distance(sf.river)
st_distance(sf.centr)
st_distance(sf.centr,sf.river)
st_distance(sf.centr,sf.river,by_element = T)
sf.centr.2 <- sf.centr[1:2,]
sf.centr.2
sf.centr
sf.river
st_distance(sf.centr.2,sf.river)
st_distance(sf.centr.2,sf.river,by_element = T)
rm(list = ls())
graphics.off()
q()
q()
q()
q()
q()
q()
library(sf) # simple features' library
library(spData) # library of spatial datasets
library(tidyverse) # dplyr, ggplot, ...
library(terra)
r.spei <- rast('../../Research/Data/gis data/spei/spei01.nc')
r.spei # note the multilayer!
# Calling specific layers:
r.spei[[1]] # double bracket!
setwd('~/Dropbox/Teaching/02-gis-unibo/')
r.spei <- rast('../../Research/Data/gis data/spei/spei01.nc')
r.spei # note the multilayer!
# Calling specific layers:
r.spei[[1]] # double bracket!
r.spei.layer <- r.spei[[1200]]
plot(r.spei.layer)
plot(st_geometry(world),add=T)
plot(r.spei.layer)
plot(st_geometry(world),add=T)
r.spei.layer
rm(list = ls())
r.points <- st_cast(pol,'POINT')
raster <- rast(elev)
raster
save(elev, file = '~/Desktop/elev.Rdata')
elev <- load('~/Desktop/elev.Rdata')
raster <- rast(elev)
raster <- rast(spData::elev)
raster
plot(raster)
plot(raster)
# Creating a sf polygon:
pol <- rbind(c(-1,1), c(-1,-.5), c(1,-1), c(0.5,1), c(-1,1))
pol <-st_polygon(list(pol))
pol <- st_sfc(pol,crs = 'EPSG:4326')
pol <- st_sf(geometry = pol)
plot(raster)
plot(pol,add=T)
r.crop <- crop(raster, pol)
raster
r.crop
r.points <- as.points(raster) %>%
st_as_sf()
r.points
r.pol <- as.polygons(raster) %>%
st_as_sf()
r.pol
plot(r.pol)
r.points <- st_cast(pol,'POINT')
plot(raster)
plot(r.points,add=T)
extract(raster,r.points)
r.points.vec <- vect(r.points)
r.points.vec
r.extract <- extract(raster,r.points.vec)
r.extract
r.points <- r.points %>%
mutate(elevation = r.extract$layer)
r.points
ggplot() +
geom_sf(data = r.points, aes(color=elevation)) +
scale_color_distiller(palette = 'Spectral') +
theme_bw()
library(exactextractr)
r.zonal <- exact_extract(
x = raster,
y = pol,
fun = c('mean', 'min','max'))
r.zonal
pol.2 <- rast() %>%
crop(raster) %>%
as.polygons() %>%
st_as_sf() %>%
st_filter(pol)
plot(pol.2)
plot(raster,add=T)
plot(pol.2)
plot(raster)
plot(pol.2,add=T)
r.zonal <- exact_extract(
x = raster,
y = pol.2,
fun = c('mean', 'min','max'))
r.zonal
pol.2 <- cbind(pol.2,r.zonal)
ggplot() +
geom_sf(data = pol.2,aes(fill=mean))
sf.river <- seine
r.template <- rast() %>%
crop(sf.river)
sf.river
sf.river <- seine %>%
st_transform('EPSG:4326')
sf.river
r.template <- rast() %>%
crop(sf.river)
r.template
sf.river.rast <- rasterize(sf.river,r.template)
sf.river.rast <- rasterize(vect(sf.river),r.template)
plot(sf.river.rast) # what is the meaning of it?
plot(sf.river,add=T)
plot(st_geometry(sf.river),add=T)
res(r.template) <- .1
r.template
sf.river.rast <- rasterize(vect(sf.river),r.template)
plot(sf.river.rast)
rm(list = ls())
graphics.off()
q()
library(sf)
library(tidyverse)
library(spData)
world
world %>% select(name_long, continent, pop)
world %>% select(name_long, continent, pop) %>%
group_by(continent) %>%
2
world %>% select(name_long, continent, pop) %>%
group_by(continent)
world %>% select(name_long, continent, pop) %>%
group_by(continent) %>% #<<
summarise(total_population = sum(pop, na.rm = T))
world %>% select(name_long, continent, pop) %>%
group_by(continent) %>%
summarise(total_population = sum(pop, na.rm = T))
sf_use_s2(F)
world %>% select(name_long, continent, pop) %>%
group_by(continent) %>%
summarise(total_population = sum(pop, na.rm = T))
2
options(htmltools.dir.version = FALSE)
# library(xaringanthemer)
# # style_mono_accent(
# #   base_color = "#1c5253"
# #   # header_font_google = google_font("Josefin Sans"),
# #   # text_font_google   = google_font("Montserrat", "300", "300i"),
# #   # code_font_google   = google_font("Fira Mono")
# # )
# # style_xaringan(link_color = 'red')
# style_xaringan(
#   text_font_family = "Droid Serif",
#   text_font_url = "https://fonts.googleapis.com/css?family=Droid+Serif:400,700,400italic",
#   header_font_google = google_font("Yanone Kaffeesatz")
# )
# other colors:
# blue: rgb(0,114,178)
# orange: rgb(213,94,0)
# green: rgb(0,158,115)
options(width = 70)
library(sf)
library(tidyverse)
library(spData)
sf_use_s2(F)
world %>% select(name_long, continent, pop) %>%
group_by(continent) %>% #<<
summarise(total_population = sum(pop, na.rm = T)) #<<
