gmsf.multipoint
gmsf.multipoint$geometry
ggplot(gmsf.multipoint) +
geom_sf()
ggplot(gmsf.multipoint) +
geom_sf(aes(fill=name))
ggplot(gmsf.multipoint) +
geom_sf(aes(color=name))
ggplot(gmsf.multipoint) +
geom_sf(aes(color=language))
gmsf.multipoint
gmsf.multipoint$language
ggplot(gmsf.multipoint) +
geom_sf(aes(shape=language))
ggplot(gmsf.multipoint) +
geom_sf(aes(color=temperature))
ggplot() +
geom_sf(data = gmsf.multipoint, aes(color=temperature))
ggplot() +
geom_sf(data = gmsf.multipoint, aes(color=language))
dev.off()
ggplot(gmsf.multipoint) +
geom_sf(aes(color=language))
gmsf.multipoint
st_drop_geometry(gmsf.multipoint)
st_drop_geometry(gmsf.multipoint)$language
ggplot(gmsf.multipoint) +
geom_sf(aes(color=name))
ggplot(gmsf.multipoint) +
geom_sf(aes(color=name)) + scale_color_discrete()
ggplot(gmsf.multipoint) +
geom_sf(aes(color=name))
gmsf.multipoint
gmsf.multipoint <- st_sf(df.attr,geometry = gmc.multipoint)
gmsf.multipoint
# Plotting with plot()
plot(gmsf.multipoint)
plot(gmsf.multipoint[,'name']) # select column
gmsf.world <- world
plot(st_drop_geometry(world))
gmsf.world <- world
plot(st_drop_geometry(world))
dev.off()
gmsf.world <- world
plot(st_drop_geometry(world))
gmsf.world <- world
plot(gmsf.world)
gmsf.world <- world
plot(st_geometry(gmsf.world))
dev.off()
gmsf.world <- world
plot(st_geometry(gmsf.world))
world
plot(gmsf.world %>% select('continent'))
ggplot(gmsf.world) +
geom_sf(aes(fill=continent))
gmsf.EU <- gmsf.world %>%
filter(subregion %in% c('Northern Europe', 'Western Europe', 'Southern Europe'))
ggplot(gmsf.EU) +
geom_sf(aes(fill=subregion))
gmsf.EU <- gmsf.world %>%
filter(subregion %in% c('Northern Europe', 'Western Europe', 'Southern Europe', 'Eastern Europe'))
ggplot(gmsf.EU) +
geom_sf(aes(fill=subregion))
gmsf.EU <- gmsf.world %>%
filter(subregion %in% c('Northern Europe'))
ggplot(gmsf.EU) +
geom_sf(aes(fill=name_long))
gmsf.multipoint
gmsf.EU
spData::coffee_data
spData::cycle_hire
gm.point <- st_point(c(0.1, 51.5)) # c(longitude,latitude)
gmc.point <- st_sfc(gm.point,crs = 'EPSG:4326')
gmc.point
gm.point2 <- st_point(c(11.3, 44.4)) # c(longitude,latitude)
gmc.point2 <- st_sfc(gm.point2,crs = 'EPSG:4326')
gmc.point
gmc.point2
dev.off()
df.attr2 <- df.attr[1:2,]
df.attr2
st_sf(df.attr,geometry = list(gmc.point,gmc.point2))
list(gmc.point,gmc.point2)
st_sf(df.attr,geometry = rbind(gmc.point,gmc.point2))
rbind(gmc.point,gmc.point2)
st_sf(df.attr,geometry = st_sfc(gmc.point,gmc.point2))
st_sfc(gmc.point,gmc.point2)
st_sfc(gm.point,gm.point2,crs = 'EPSG:4326')
st_point(linestring_matrix)
lapply(linestring_matrix, st_point)
aa <- rbind(
c(0.1, 51.5),
c(11.3, 44.4),
c(-3.7, 40.4),
c(2.3, 48.8)
)
aa
st_as_sfc(df.attr,aa)
st_as_sfc(df.attr,geometry = aa)
st_as_sf(x = df.attr,aa)
st_as_sf(x = df.attr,data.frame(aa))
st_as_sf(x = df.attr,coords = aa)
df.attr
aa
data.frame(aa)
cbind(df.attr,aa)
cbind(df.attr,data.frame(aa))
st_as_sf(cbind(df.attr,data.frame(aa)),coords = c('X1','X2'))
aa<-st_as_sf(cbind(df.attr,data.frame(aa)),coords = c('X1','X2'))
ggplot(aa) +
geom_sf(aes(color=language))
dev.off()
## ------------------------------------------------------
## 01_CLASS01.R - R Script for Lecture 01 (GIS course).
# version: 1.0
# Author: Bruno Conte Leite @2022-23
# b.conte@unibo.it
## ------------------------------------------------------
# 1. BASICS OF SPATIAL DATA WITH SIMPLE FEATURES: ----
library(sf) # simple features' library
library(spData) # library of spatial datasets
library(dplyr) # for tidyverse operations
library(ggplot2)
# Cheat sheet: https://osf.io/an6b5/download
# 1.1. Creating SF GEOMETRIES (SFG):
gm.point <- st_point(c(5,2)) # a point
# Lines: require a matrix of points
linestring_matrix <-rbind(c(1, 5), c(4, 4), c(4, 1), c(2, 2), c(3, 2))
gm.line <- st_linestring(linestring_matrix)
# Polygons: require a LIST with the matrices
# (important: first and last vertices must be
# the same)
polygon_list <- list(rbind(c(1, 5), c(2, 2), c(4, 1), c(4, 4), c(1, 5)))
gm.polyg <- st_polygon(polygon_list)
# MULTI SF GEOMETRIES:
# Multipoints: a matrix with coordinates
gm.multipoints <- st_multipoint(linestring_matrix)
# Multilines: use a LIST of matrices (each with
# each lines' coordinates):
multiline_list <- list(rbind(c(1, 5), c(4, 4), c(4, 1), c(2, 2), c(3, 2)),
rbind(c(1, 2), c(2, 4)))
gm.multilines <- st_multilinestring((multiline_list))
# Multipolygons: use a LIST OF LISTS:
## MULTIPOLYGON
multipolygon_list <- list(list(rbind(c(1, 5), c(2, 2), c(4, 1), c(4, 4), c(1, 5))),
list(rbind(c(0, 2), c(1, 2), c(1, 3), c(0, 3), c(0, 2))))
gm.multipolyg <- st_multipolygon(multipolygon_list)
# 1.2. CREATING SF COLUMNS:
# SF COMLUMN: GEOMETRY + PROJECTION:
# Remember: ALWAYS use standardized "EPSG:4326"
# CRS (WGS 84); longitude/latitude:
gm.point <- st_point(c(11.3, 44.4)) # c(longitude,latitude)
gmc.point <- st_sfc(gm.point,crs = 'EPSG:4326')
gmc.point
gm.point <- st_point(c(11.3, 44.4)) # c(longitude,latitude)
gmc.point <- st_sfc(gm.point,crs = 'EPSG:4326')
gmc.point
# 1.3. CREATING SIMPLE FEATURES (SF):
# SIMPLE FEATURE:
#  - SF COLUMN (GEOMETRY + PROJECTION) +
#  - ATTRIBUTE (DATA FRAME)
df.attr <- data.frame(
name = 'Bologna',
temperature = 31,
language = 'Italian'
)
gmsf.point <- st_sf(df.attr,geometry = gmc.point)
gmsf.point
plot(gmsf.point)
plot(gmsf.multipoint[,'name']) # select column
rm(list = ls())
dev.off()
## ------------------------------------------------------
## 01_CLASS01.R - R Script for Lecture 01 (GIS course).
# version: 1.0
# Author: Bruno Conte Leite @2022-23
# b.conte@unibo.it
## ------------------------------------------------------
# 1. BASICS OF SPATIAL DATA WITH SIMPLE FEATURES: ----
library(sf) # simple features' library
library(spData) # library of spatial datasets
library(dplyr) # for tidyverse operations
library(ggplot2)
# Cheat sheet: https://osf.io/an6b5/download
# 1.1. Creating SF GEOMETRIES (SFG):
gm.point <- st_point(c(5,2)) # a point
# Lines: require a matrix of points
linestring_matrix <-rbind(c(1, 5), c(4, 4), c(4, 1), c(2, 2), c(3, 2))
gm.line <- st_linestring(linestring_matrix)
# Polygons: require a LIST with the matrices
# (important: first and last vertices must be
# the same)
polygon_list <- list(rbind(c(1, 5), c(2, 2), c(4, 1), c(4, 4), c(1, 5)))
gm.polyg <- st_polygon(polygon_list)
# MULTI SF GEOMETRIES:
# Multipoints: a matrix with coordinates
gm.multipoints <- st_multipoint(linestring_matrix)
# Multilines: use a LIST of matrices (each with
# each lines' coordinates):
multiline_list <- list(rbind(c(1, 5), c(4, 4), c(4, 1), c(2, 2), c(3, 2)),
rbind(c(1, 2), c(2, 4)))
gm.multilines <- st_multilinestring((multiline_list))
# Multipolygons: use a LIST OF LISTS:
## MULTIPOLYGON
multipolygon_list <- list(list(rbind(c(1, 5), c(2, 2), c(4, 1), c(4, 4), c(1, 5))),
list(rbind(c(0, 2), c(1, 2), c(1, 3), c(0, 3), c(0, 2))))
gm.multipolyg <- st_multipolygon(multipolygon_list)
# 1.2. CREATING SF COLUMNS:
# SF COMLUMN: GEOMETRY + PROJECTION:
# Remember: ALWAYS use standardized "EPSG:4326"
# CRS (WGS 84); longitude/latitude:
gm.point <- st_point(c(11.3, 44.4)) # c(longitude,latitude)
gmc.point <- st_sfc(gm.point,crs = 'EPSG:4326')
gmc.point
# 1.3. CREATING SIMPLE FEATURES (SF):
# SIMPLE FEATURE:
#  - SF COLUMN (GEOMETRY + PROJECTION) +
#  - ATTRIBUTE (DATA FRAME)
df.attr <- data.frame(
name = 'Bologna',
temperature = 31,
language = 'Italian'
)
gmsf.point <- st_sf(df.attr,geometry = gmc.point)
gmsf.point
# Plotting with plot()
plot(gmsf.point)
plot(gmsf.multipoint[,'name']) # select column
plot(gmsf.point[,'name']) # select column
plot(st_geometry(gmsf.multipoint)) # only geometry (no attributes)
ggplot(gmsf.point) +
geom_sf()
ggplot(aa) +
geom_sf(aes(color=language))
ggplot(gmsf.point) +
geom_sf(aes(color=language))
ggplot(gmsf.point) +
geom_sf(aes(color=name))
gmsf.point
gmsf.point$name
gmsf.point
gmsf.point[,'name']
gmsf.point %>% select(name)
gmsf.world <- world
plot(st_geometry(gmsf.world))
st_geometry(gmsf.point)
plot(gmsf.world)
dev.off()
gmsf.world
plot(gmsf.world[,'continent'])
plot(gmsf.world %>% select('continent')) # dplyr syntax
plot(st_geometry(gmsf.world)) # only geometry, no attributes
ggplot(gmsf.world) +
geom_sf()
ggplot(gmsf.world) +
geom_sf(aes(fill=continent))
# Filtering spatial data:
gmsf.EU <- gmsf.world %>%
filter(subregion %in% c('Southern Europe'))
ggplot(gmsf.EU) +
geom_sf(aes(fill=name_long))
ggplot() + # leave empty, add data to geometry
geom_sf(data = gmsf.EU) +
geom_sf(gmsf.point)
ggplot() + # leave empty, add data to geometry
geom_sf(data = gmsf.EU) +
geom_sf(data = gmsf.point)
gmsf.EU
ggplot() + # leave empty, add data to geometry
geom_sf(data = gmsf.EU, aes(fill = name_long)) +
geom_sf(data = gmsf.point)
ggplot() + # leave empty, add data to geometry
geom_sf(data = gmsf.EU) +
geom_sf(data = gmsf.point, aes(color = name))
rm(list = ls())
graphics.off()
# Hypothetical dataset of cities:
df.cities <- data.frame(
name = c('Bologna', 'London', 'Madrid', 'Paris'),
temperature = c(31, 21, 29,28),
language = c('Italian', 'English', 'Spanish', 'French'),
longitude = c(11.3,-0.1,-3.7,2.3),
latitude = c(44.4,51.5, 40.4,48.8)
)
df.cities
sf.cities <- st_as_sf(df.cities,coords = c('longitude', 'latitude'))
plot(sf.cities)
graphics.off()
sf.cities
sf.EU <- world %>%
filter(continent=='Europe' & name_long!='Russia')
sf.EU
sf.EU <- world %>%
filter(continent=='Europe' & name_long!='Russian Federation')
sf.EU
ggplot() + # leave empty, add data to geometry
geom_sf(data = sf.EU) +
geom_sf(data = sf.cities, aes(color = name))
sf.cities
sf.cities <- st_as_sf(
df.cities,
coords = c('longitude', 'latitude'),
crs = 'EPSG:4326'
)
sf.cities # watch out CRS (projection)!
# Plotting as before:
ggplot() + # leave empty, add data to geometry
geom_sf(data = sf.EU) +
geom_sf(data = sf.cities, aes(color = name))
ggplot() + # leave empty, add data to geometry
geom_sf(data = sf.EU, aes(fill=name_long)) +
geom_sf(data = sf.cities, aes(shape = language))
ggplot() + # leave empty, add data to geometry
geom_sf(data = sf.EU, aes(fill=subregion)) +
geom_sf(data = sf.cities, aes(shape = language))
ggplot(sf.EU) + geom_sf()
ggplot(st_transform(sf.EU,3857)) + geom_sf()
ggplot(st_transform(sf.EU,'+proj=wintri')) + geom_sf()
sf.EU
sf.EU %>% slice(1:5)
sf.EU %>% slice_head()
sf.EU %>% slice_head(n=10)
sf.EU %>% slice_head(n=15)
df.cities
df.cities %>% group_by(name)
q()
## ------------------------------------------------------
## 01_CLASS01.R - R Script for Lecture 01 (GIS course).
# version: 1.0
# Author: Bruno Conte Leite @2022-23
# b.conte@unibo.it
## ------------------------------------------------------
# 1. BASICS OF SPATIAL DATA WITH SIMPLE FEATURES: ----
library(sf) # simple features' library
library(spData) # library of spatial datasets
library(tidyverse) # dplyr, ggplot, ...
sf.provinces <- st_read('../../../Downloads/ne_110m_admin_1_states_provinces/', 'ne_110m_admin_1_states_provinces')
sf.provinces
head(sf.provinces)
sf.provinces
names(sf.provinces)
sf.provinces
sf.provinces$area_sqkm
sf.provinces$postal
sf.provinces <- sf.provinces %>%
select(name, region_sub)
sf.provinces
plot(sf.provinces)
ggplot(sf.provinces) +
geom_sf(aes(fill=region_sub))
sf.provinces <- st_read('../../../Downloads/ne_110m_admin_1_states_provinces/', 'ne_110m_admin_1_states_provinces')
sf.provinces <- sf.provinces %>%
select(name, region, region_sub)
sf.provinces
ggplot(sf.provinces) +
geom_sf(aes(fill=region))
ggplot(sf.provinces %>% filter(region=='West')) +
geom_sf(aes(fill=region_sub))
sf.prov.reproj <- st_transform(sf.provinces, crs = "+proj=moll")
ggplot(sf.provinces) +
geom_sf(aes(fill=region))
ggplot(sf.prov.reproj) +
geom_sf(aes(fill=region))
ggplot(sf.provinces) +
geom_sf(fill-region) +
coord_sf(crs = "+proj=moll")
ggplot(sf.provinces) +
geom_sf(fill=region) +
coord_sf(crs = "+proj=moll")
sf.provinces <- st_read('../../../Downloads/ne_110m_admin_1_states_provinces/', 'ne_110m_admin_1_states_provinces')
sf.provinces
# It has too many variables (fields)! Select those that matter!
sf.provinces <- sf.provinces %>%
select(name, region, region_sub)
ggplot(sf.provinces) +
geom_sf(aes(fill=region))
ggplot(sf.provinces) +
geom_sf(aes(fill=region)) +
coord_sf(crs = "+proj=moll")
ggplot(sf.provinces) +
geom_sf(aes(fill=region)) +
coord_sf(crs = "+proj=moll")
ggplot(sf.provinces) +
geom_sf(aes(fill=region)) +
coord_sf(crs = "+proj=wintri")
ggplot(sf.provinces) +
geom_sf(aes(fill=region)) +
coord_sf(crs = "+proj=laea +x_0=0 +y_0=0 +lon_0=-74 +lat_0=40")
rm(sf.prov.reproj)
sf.andorra <- st_read('../../../Downloads/gadm41_AND.gpkg')
st_layers('../../../Downloads/gadm41_AND.gpkg')
sf.andorra <- st_read('../../../Downloads/gadm41_AND.gpkg', 'ADM_ADM_1')
sf.andorra
plot(sf.andorra)
sf.andorra
ggplot(sf.andorra) + geom_sf()
sf.andorra <- st_read('../../../Downloads/gadm41_AND_1.json')
sf.andorra
sf.andorra <- st_read('../../../Downloads/gadm41_AND_1.kmz')
sf.andorra <- st_read('../../../Downloads/gadm41_AND_1.kml')
graphics.off()
rm(list = ls())
library(sf) # simple features' library
library(spData) # library of spatial datasets
library(tidyverse) # dplyr, ggplot, ...
# Cheat sheet: https://osf.io/an6b5/download
# 1.1. Creating SF GEOMETRIES (SFG):
gm.point <- st_point(c(5,2)) # a point
# Lines: require a matrix of points
linestring_matrix <-rbind(c(1, 5), c(4, 4), c(4, 1), c(2, 2), c(3, 2))
gm.line <- st_linestring(linestring_matrix)
# Polygons: require a LIST with the matrices
# (important: first and last vertices must be
# the same)
polygon_list <- list(rbind(c(1, 5), c(2, 2), c(4, 1), c(4, 4), c(1, 5)))
gm.polyg <- st_polygon(polygon_list)
# MULTI SF GEOMETRIES:
# Multipoints: a matrix with coordinates
gm.multipoints <- st_multipoint(linestring_matrix)
# Multilines: use a LIST of matrices (each with
# each lines' coordinates):
multiline_list <- list(rbind(c(1, 5), c(4, 4), c(4, 1), c(2, 2), c(3, 2)),
rbind(c(1, 2), c(2, 4)))
gm.multilines <- st_multilinestring((multiline_list))
# Multipolygons: use a LIST OF LISTS:
## MULTIPOLYGON
multipolygon_list <- list(list(rbind(c(1, 5), c(2, 2), c(4, 1), c(4, 4), c(1, 5))),
list(rbind(c(0, 2), c(1, 2), c(1, 3), c(0, 3), c(0, 2))))
gm.multipolyg <- st_multipolygon(multipolygon_list)
# 1.2. CREATING SF COLUMNS:
# SF COMLUMN: GEOMETRY + PROJECTION:
# Remember: ALWAYS use standardized "EPSG:4326"
# CRS (WGS 84); longitude/latitude:
gm.point <- st_point(c(11.3, 44.4)) # c(longitude,latitude)
gmc.point <- st_sfc(gm.point,crs = 'EPSG:4326')
gmc.point
# 1.3. CREATING SIMPLE FEATURES (SF):
# SIMPLE FEATURE:
#  - SF COLUMN (GEOMETRY + PROJECTION) +
#  - ATTRIBUTE (DATA FRAME)
df.attr <- data.frame(
name = 'Bologna',
temperature = 31,
language = 'Italian'
)
gmsf.point <- st_sf(df.attr,geometry = gmc.point)
gmsf.point
gmsf.point[,'name']
gmsf.point %>% select(name) # dplyr syntax
st_geometry(gmsf.point)
# Plotting with ggplot():
ggplot(gmsf.point) +
geom_sf()
ggplot(gmsf.point) +
geom_sf(aes(color=name))
# 1.4. Combining (i.e. plotting) different
# simple features:
# Using the 'world' data from spData:
gmsf.world <- world
gmsf.world
# First plotting with plot()
plot(gmsf.world)
plot(gmsf.world[,'continent'])
plot(gmsf.world %>% select('continent')) # dplyr syntax
plot(st_geometry(gmsf.world)) # only geometry, no attributes
# using ggplot:
ggplot(gmsf.world) +
geom_sf()
ggplot(gmsf.world) +
geom_sf(aes(fill=continent))
# Filtering spatial data:
gmsf.EU <- gmsf.world %>%
filter(subregion %in% c('Southern Europe'))
ggplot(gmsf.EU) +
geom_sf(aes(fill=name_long))
# 1.4. Plotting them together (multilayer
# ggplot):
ggplot() + # leave empty, add data to geometry
geom_sf(data = gmsf.EU) +
geom_sf(data = gmsf.point)
ggplot() + # leave empty, add data to geometry
geom_sf(data = gmsf.EU, aes(fill = name_long)) +
geom_sf(data = gmsf.point)
ggplot() + # leave empty, add data to geometry
geom_sf(data = gmsf.EU) +
geom_sf(data = gmsf.point, aes(color = name))
rm(list = ls()) # cleaning envrionment
graphics.off()
df.cities <- data.frame(
name = c('Bologna', 'London', 'Madrid', 'Paris'),
temperature = c(31, 21, 29,28),
language = c('Italian', 'English', 'Spanish', 'French'),
longitude = c(11.3,-0.1,-3.7,2.3),
latitude = c(44.4,51.5, 40.4,48.8)
)
df.cities
sf.cities <- st_as_sf(df.cities,coords = c('longitude', 'latitude'))
sf.cities
plot(sf.cities)
graphics.off()
ggplot(sf.cities) + geom_sf()
sf.cities <- st_as_sf(
df.cities,
coords = c('longitude', 'latitude'),
crs = 'EPSG:4326'
)
sf.cities
ggplot(sf.cities) + geom_sf()
st_write(sf.cities,'Sandbox/sf_cities.shp')
graphics.off()
rm(list = ls())
