}
df.spei <- st_drop_geometry(sf.usa)
df.spei
df.spei %>% gather(key = c('GEOID', 'NAME'))
df.spei %>% gather(key = NAME)
sf.usa <- us_states %>%
st_transform('EPSG:4326') %>%
dplyr::select(NAME)
for (i in 1:20) {
sf.usa$a <- exact_extract(
r.spei[[1380-((i-1)*12)]],
sf.usa,
'mean'
)
sf.usa <- sf.usa %>%
rename(!!paste0('spei_',2016-i) := a)
}
df.spei <- st_drop_geometry(sf.usa)
df.spei <- st_drop_geometry(sf.usa) %>%
gather(key = NAME)
df.spei
tibble(df.spei)
names(df.spei)
df.spei <- st_drop_geometry(sf.usa)
names(df.spei)
df.spei <- st_drop_geometry(sf.usa) %>%
gather(year,spei,spei_2015:spei_1996)
df.spei
df.spei <- st_drop_geometry(sf.usa) %>%
gather(year,spei,spei_2015:spei_1996) %>%
mutate(year = as.numeric(gsub('spei_', '', year)))
df.spei
head(df.spei)
ggplot(df.spei) + geom_line(aes(year,spei,color = NAME)) + theme_bw()
sf.usa <- us_states
sf.usa
sf.usa <- us_states %>%
st_transform('EPSG:4326') %>%
group_by(REGION) %>%
summarise()
sf.usa
for (i in 1:20) {
sf.usa$a <- exact_extract(
r.spei[[1380-((i-1)*12)]],
sf.usa,
'mean'
)
sf.usa <- sf.usa %>%
rename(!!paste0('spei_',2016-i) := a)
}
df.spei <- st_drop_geometry(sf.usa) %>%
gather(year,spei,spei_2015:spei_1996) %>%
mutate(year = as.numeric(gsub('spei_', '', year)))
df.spei
ggplot(df.spei) +
geom_line(aes(year,spei,color = REGION)) +
theme_bw()
sf.roads <- st_read('../../../Downloads/ne_10m_roads/', 'ne_10m_roads')
sf.roads <- sf.roads %>%
st_filter(world %>% filter(name_long=='Spain'))
sf.roads
ggplot() +
geom_sf(data = world %>% filter(name_long=='Spain')) +
geom_sf(data = sf.roads) +
theme_bw()
r.template <- rast() %>%
crop(world %>% filter(name_long=='Spain'))
res(r.template) <- .1
r.roads <- rasterize(vect(sf.roads),r.template)
plot(r.roads)
sf.roads <- st_read('../../../Downloads/ne_10m_roads/', 'ne_10m_roads')
# filtering in Spain:
sf.roads <- sf.roads %>%
st_filter(world %>% filter(name_long=='Spain'))
# Rasterizing it:
r.template <- rast() %>%
crop(world %>% filter(name_long=='Spain'))
res(r.template) <- .1
r.roads <- rasterize(vect(sf.roads),r.template)
vv <- values(r.roads)
vv[is.nan(vv)] <- 100
values(r.roads) <- vv
rm(vv)
plot(r.roads)
tr.matrix <- transition(
x = raster::raster(sf.raster), # why error? needs a raster() object!
transitionFunction = function(x) 1/mean(x),
# transitionFunction = mean,
directions = 8
)
# Populated places in Spain:
sf.points <- st_read('../../../Downloads/ne_10m_populated_places/', 'ne_10m_populated_places')
# Filtering in Spain:
sf.points <- sf.points %>%
st_filter(world %>% filter(name_long=='Spain')) %>%
dplyr::select(NAME,POP_MAX) %>%
arrange(-POP_MAX) %>%
slice(1:10)
sf.points[1,'NAME']
sf.points[1,]$NAME
i<-1
j<-2
paste('Calculating: ', sf.points[i,]$NAME, ' from ', sf.points[j,]$NAME)
dist.mat <- matrix(
0,
nrow = nrow(sf.points),
ncol = nrow(sf.points)
)
for (i in 1:nrow(sf.points)) {
for (j in 1:nrow(sf.points)) {
# Printing it:
paste('Calculating: ', sf.points[i,]$NAME, ' from ', sf.points[j,]$NAME)
# Creating the sp points:
sp.point.1 <- as_Spatial(sf.points[i,])
sp.point.2 <- as_Spatial(sf.points[j,])
# Caluculating path:
sp.distance <- shortestPath(
x = tr.matrix,
origin = sp.point.1,
goal = sp.point.2,
output = "SpatialLines"
)
# Extracting length:
sf.distance <- st_as_sf(sp.distance)
dist.mat[i,j] <- st_length(sf.distance)/1e3 # in km
}
}
df.distances <- data.frame(dist.mat) %>%
gather() # reshaping it
df.distances <- df.distances %>%
rename(orig = key, distance = value) %>%
mutate(dest = rep(paste0('X',1:10),10)) %>%
left_join(data.frame(orig = paste0('X',1:10),origin = sf.points$NAME)) %>%
left_join(data.frame(dest = paste0('X',1:10),destination = sf.points$NAME)) %>%
dplyr::select(origin,destination,distance)
sf.roads <- st_read('../../../Downloads/ne_10m_roads/', 'ne_10m_roads')
# filtering in Spain:
sf.roads <- sf.roads %>%
st_filter(world %>% filter(name_long=='Spain'))
# Rasterizing it:
r.template <- rast() %>%
crop(world %>% filter(name_long=='Spain'))
res(r.template) <- .1
r.roads <- rasterize(vect(sf.roads),r.template)
# replacing values:
vv <- values(r.roads)
vv[is.nan(vv)] <- 100
values(r.roads) <- vv
rm(vv)
# Transition matrix:
tr.matrix <- transition(
x = raster::raster(sf.raster), # why error? needs a raster() object!
transitionFunction = function(x) 1/mean(x),
# transitionFunction = mean,
directions = 8
)
sf.points <- st_read('../../../Downloads/ne_10m_populated_places/', 'ne_10m_populated_places')
sf.points <- sf.points %>%
st_filter(world %>% filter(name_long=='Spain')) %>%
dplyr::select(NAME,POP_MAX) %>%
arrange(-POP_MAX) %>%
slice(1:10)
# Calculating distances:
dist.mat <- matrix(
0,
nrow = nrow(sf.points),
ncol = nrow(sf.points)
)
i<-1
j<-2
paste('Calculating: ', sf.points[i,]$NAME, ' from ', sf.points[j,]$NAME)
sp.point.1 <- as_Spatial(sf.points[i,])
sp.point.2 <- as_Spatial(sf.points[j,])
sp.distance <- shortestPath(
x = tr.matrix,
origin = sp.point.1,
goal = sp.point.2,
output = "SpatialLines"
)
sp.distance <- gdistance::shortestPath(
x = tr.matrix,
origin = sp.point.1,
goal = sp.point.2,
output = "SpatialLines"
)
tr.matrix
sf.roads <- st_read('../../../Downloads/ne_10m_roads/', 'ne_10m_roads')
# filtering in Spain:
sf.roads <- sf.roads %>%
st_filter(world %>% filter(name_long=='Spain'))
# Rasterizing it:
r.template <- rast() %>%
crop(world %>% filter(name_long=='Spain'))
res(r.template) <- .05
r.roads <- rasterize(vect(sf.roads),r.template)
# replacing values:
vv <- values(r.roads)
vv[is.nan(vv)] <- 100
values(r.roads) <- vv
rm(vv)
# Transition matrix:
tr.matrix <- transition(
x = raster::raster(sf.raster), # why error? needs a raster() object!
transitionFunction = function(x) 1/mean(x),
# transitionFunction = mean,
directions = 8
)
tr.matrix
sf.roads <- st_read('../../../Downloads/ne_10m_roads/', 'ne_10m_roads')
# filtering in Spain:
sf.roads <- sf.roads %>%
st_filter(world %>% filter(name_long=='Spain'))
# Rasterizing it:
r.template <- rast() %>%
crop(world %>% filter(name_long=='Spain'))
res(r.template) <- .1
r.roads <- rasterize(vect(sf.roads),r.template)
# replacing values:
vv <- values(r.roads)
vv[is.nan(vv)] <- 100
values(r.roads) <- vv
rm(vv)
# Transition matrix:
tr.matrix <- transition(
x = raster::raster(r.roads), # why error? needs a raster() object!
transitionFunction = function(x) 1/mean(x),
# transitionFunction = mean,
directions = 8
)
# Populated places in Spain:
sf.points <- st_read('../../../Downloads/ne_10m_populated_places/', 'ne_10m_populated_places')
# Filtering in Spain:
sf.points <- sf.points %>%
st_filter(world %>% filter(name_long=='Spain')) %>%
dplyr::select(NAME,POP_MAX) %>%
arrange(-POP_MAX) %>%
slice(1:10)
# Calculating distances:
dist.mat <- matrix(
0,
nrow = nrow(sf.points),
ncol = nrow(sf.points)
)
for (i in 1:nrow(sf.points)) {
for (j in 1:nrow(sf.points)) {
# Printing it:
paste('Calculating: ', sf.points[i,]$NAME, ' from ', sf.points[j,]$NAME)
# Creating the sp points:
sp.point.1 <- as_Spatial(sf.points[i,])
sp.point.2 <- as_Spatial(sf.points[j,])
# Caluculating path:
sp.distance <- gdistance::shortestPath(
x = tr.matrix,
origin = sp.point.1,
goal = sp.point.2,
output = "SpatialLines"
)
# Extracting length:
sf.distance <- st_as_sf(sp.distance)
dist.mat[i,j] <- st_length(sf.distance)/1e3 # in km
}
}
dist.mat <- matrix(
0,
nrow = nrow(sf.points),
ncol = nrow(sf.points)
)
for (i in 1:nrow(sf.points)) {
for (j in 1:nrow(sf.points)) {
# Printing it:
print(paste('Calculating: ', sf.points[i,]$NAME, ' from ', sf.points[j,]$NAME))
# Creating the sp points:
sp.point.1 <- as_Spatial(sf.points[i,])
sp.point.2 <- as_Spatial(sf.points[j,])
# Caluculating path:
sp.distance <- gdistance::shortestPath(
x = tr.matrix,
origin = sp.point.1,
goal = sp.point.2,
output = "SpatialLines"
)
# Extracting length:
sf.distance <- st_as_sf(sp.distance)
dist.mat[i,j] <- st_length(sf.distance)/1e3 # in km
}
}
df.distances <- data.frame(dist.mat) %>%
gather() # reshaping it
df.distances <- df.distances %>%
rename(orig = key, distance = value) %>%
mutate(dest = rep(paste0('X',1:10),10)) %>%
left_join(data.frame(orig = paste0('X',1:10),origin = sf.points$NAME)) %>%
left_join(data.frame(dest = paste0('X',1:10),destination = sf.points$NAME)) %>%
dplyr::select(origin,destination,distance)
df.distances
ggplot(df.distances %>% filter(origin %in% c('Madrid', 'Barcelona'))) +
geom_density(aes(distance, fill=origin,color=origin),alpha=.5) +
theme_bw()
ggplot(df.distances %>% filter(origin %in% c('Madrid', 'Vigo'))) +
geom_density(aes(distance, fill=origin,color=origin),alpha=.5) +
theme_bw()
plot(sf.roads)
sf.roads$featurecla
ggplot() +
geom_sf(data = world %>% filter(name_long=='Spain')) +
geom_sf(data = sf.roads %>% filter(featurecla=='Road')) +
theme_bw()
ggplot() +
geom_sf(data = world %>% filter(name_long=='Spain')) +
geom_sf(data = sf.roads %>% filter(featurecla=='Road')) +
geom_sf(data = sf.points %>% filter(NAME %in% c('Madrid', 'Vigo')), aes(color = NAME, shape = NAME)) +
theme_bw()
ggplot() +
geom_sf(data = world %>% filter(name_long=='Spain')) +
geom_sf(data = sf.roads %>% filter(featurecla=='Road')) +
geom_sf(data = sf.points %>% filter(NAME %in% c('Madrid', 'Vigo')), aes(shape = NAME), color = 'red') +
theme_bw()
ggplot() +
geom_sf(data = world %>% filter(name_long=='Spain')) +
geom_sf(data = sf.roads %>% filter(featurecla=='Road')) +
geom_sf(data = sf.points %>% filter(NAME %in% c('Madrid', 'Vigo')), aes(color = NAME, shape = NAME),size=2) +
theme_bw()
ggplot(df.distances %>% filter(origin %in% c('Madrid', 'Vigo'))) +
geom_density(aes(distance, fill=origin,color=origin),alpha=.5) +
theme_bw()
graphics.off()
rm(list = ls())
## ------------------------------------------------------
## 01_CLASS05.R - R Script for Lecture 04 (GIS course).
# version: 1.0
# Author: Bruno Conte Leite @2022-23
# b.conte@unibo.it
## ------------------------------------------------------
library(sf) # simple features' library
library(spData) # library of spatial datasets
library(tidyverse) # dplyr, ggplot, ...
library(terra)
library(exactextractr)
r.spei <- rast('../../../Dropbox/Research/Data/gis data/spei/spei01.nc')
sf.usa <- us_states %>% st_transform('EPSG:4326')
sf.usa$spei_2015 <- exact_extract(r.spei[[1380]],sf.usa,'mean')
ggplot(sf.usa) + geom_sf(aes(fill=spei_2015)) + theme_bw()
ggplot(sf.usa) + geom_sf(aes(fill=spei_2015)) + scale_fill_distiller(palette = 'Reds') + theme_bw()
ggplot(sf.usa) + geom_sf(aes(fill=spei_2015)) + scale_fill_distiller(palette = 'Spectral') + theme_bw()
sf.usa$spei_2010 <- exact_extract(r.spei[[1320]],sf.usa,'mean')
ggplot(sf.usa) + geom_sf(aes(fill=spei_2010)) + scale_fill_distiller(palette = 'Spectral') + theme_bw()
graphics.off()
# Populated places in Spain:
sf.points <- st_read('../../../Downloads/ne_10m_populated_places/', 'ne_10m_populated_places')
# Filtering in Spain:
sf.points <- sf.points %>%
st_filter(world %>% filter(name_long=='Spain')) %>%
dplyr::select(NAME,POP_MAX) %>%
arrange(-POP_MAX) %>%
slice(1:10)
sf.points
sf.raster <- rast('../../../Downloads/MSR_50M/MSR_50M.tif')
# Cropping it:
sf.raster <- sf.raster %>% crop(world %>% filter(name_long=='Spain'))
i<-1
j<-10
sp.point.1 <- as_Spatial(sf.points[i,])
sp.point.2 <- as_Spatial(sf.points[j,])
# Caluculating path:
sp.distance <- shortestPath(
x = tr.matrix,
origin = sp.point.1,
goal = sp.point.2,
output = "SpatialLines"
)
library(gdistance)
sp.point.1 <- as_Spatial(sf.points[i,])
sp.point.2 <- as_Spatial(sf.points[j,])
# Caluculating path:
sp.distance <- shortestPath(
x = tr.matrix,
origin = sp.point.1,
goal = sp.point.2,
output = "SpatialLines"
)
sf.points <- st_read('../../../Downloads/ne_10m_populated_places/', 'ne_10m_populated_places')
# Filtering in Spain:
sf.points <- sf.points %>%
st_filter(world %>% filter(name_long=='Spain')) %>%
dplyr::select(NAME,POP_MAX) %>%
arrange(-POP_MAX) %>%
slice(1:10)
# Elevation raster:
sf.raster <- rast('../../../Downloads/MSR_50M/MSR_50M.tif')
# Cropping it:
sf.raster <- sf.raster %>% crop(world %>% filter(name_long=='Spain'))
# Transition matrix:
tr.matrix <- transition(
x = raster::raster(sf.raster), # why error? needs a raster() object!
# transitionFunction = function(x) 1/mean(x),
transitionFunction = mean,
directions = 8
)
tr.matrix
# Creating the sp points:
sp.point.1 <- as_Spatial(sf.points[i,])
sp.point.2 <- as_Spatial(sf.points[j,])
# Caluculating path:
sp.distance <- shortestPath(
x = tr.matrix,
origin = sp.point.1,
goal = sp.point.2,
output = "SpatialLines"
)
# Extracting length:
sf.distance <- st_as_sf(sp.distance)
sp.distance <- gdistance::shortestPath(
x = tr.matrix,
origin = sp.point.1,
goal = sp.point.2,
output = "SpatialLines"
)
sf.distance <- st_as_sf(sp.distance)
sf.distance/1e3
st_length(sf.distance)/1e3
plot(sf.raster)
plot(st_geometry(world %>% filter(name_long=='Spain')),add=T)
plot(sp.point.1,add=T,pch=20)
plot(sp.point.2,add=T,pch=20)
plot(sp.distance,add=T)
plot(sf.raster)
plot(st_geometry(world %>% filter(name_long=='Spain')),add=T)
plot(st_geometry(sf.points),add=T)
plot(sf.raster)
plot(st_geometry(world %>% filter(name_long=='Spain')),add=T)
plot(st_geometry(sf.points),add=T,pch=20)
graphics.off()
r.spei <- rast('../../../Dropbox/Research/Data/gis data/spei/spei01.nc')
sf.usa <- us_states %>%
st_transform('EPSG:4326') %>%
group_by(REGION) %>%
summarise()
for (i in 1:20) {
sf.usa$a <- exact_extract(
r.spei[[1380-((i-1)*12)]],
sf.usa,
'mean'
)
sf.usa <- sf.usa %>%
rename(!!paste0('spei_',2016-i) := a)
}
df.spei <- st_drop_geometry(sf.usa) %>%
gather(year,spei,spei_2015:spei_1996) %>%
mutate(year = as.numeric(gsub('spei_', '', year)))
ggplot(df.spei) +
geom_line(aes(year,spei,color = REGION)) +
theme_bw()
ggplot(df.spei) +
geom_smooth(aes(year,spei)) +
theme_bw()
ggplot(df.spei) +
geom_line(aes(year,spei,color = REGION)) +
geom_smooth(aes(year,spei),alpha=.5) +
theme_bw()
r.spei <- rast('../../../Dropbox/Research/Data/gis data/spei/spei01.nc')
sf.usa <- us_states %>%
st_transform('EPSG:4326') %>%
group_by(REGION) %>%
summarise()
for (i in 1:50) {
sf.usa$a <- exact_extract(
r.spei[[1380-((i-1)*12)]],
sf.usa,
'mean',
progress=F
)
sf.usa <- sf.usa %>%
rename(!!paste0('spei_',2016-i) := a)
}
f.spei <- st_drop_geometry(sf.usa) %>%
gather(year,spei,spei_2015:spei_1996) %>%
mutate(year = as.numeric(gsub('spei_', '', year)))
ggplot(df.spei) +
geom_line(aes(year,spei,color = REGION)) +
geom_smooth(aes(year,spei),alpha=.5) +
theme_bw()
df.spei
df.spei$year
r.spei <- rast('../../../Dropbox/Research/Data/gis data/spei/spei01.nc')
sf.usa <- us_states %>%
st_transform('EPSG:4326') %>%
group_by(REGION) %>%
summarise()
for (i in 1:50) {
sf.usa$a <- exact_extract(
r.spei[[1380-((i-1)*12)]],
sf.usa,
'mean'
)
sf.usa <- sf.usa %>%
rename(!!paste0('spei_',2016-i) := a)
}
sf.usa
names(sf.usa)
df.spei <- st_drop_geometry(sf.usa) %>%
gather(year,spei,spei_2015:spei_1966) %>%
mutate(year = as.numeric(gsub('spei_', '', year)))
ggplot(df.spei) +
geom_line(aes(year,spei,color = REGION)) +
geom_smooth(aes(year,spei),alpha=.5) +
theme_bw()
ggplot(df.spei) +
geom_line(aes(year,spei,color = REGION)) +
geom_smooth(aes(year,spei),alpha=.5) +
theme_bw()
graphics.off()
rm(list = ls())
